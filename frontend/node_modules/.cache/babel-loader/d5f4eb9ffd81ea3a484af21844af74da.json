{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ismaiel\\\\Desktop\\\\Klippa\\\\frontend\\\\src\\\\components\\\\About.js\";\nimport React from 'react';\nimport { Button, Container } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst About = ({\n  history\n}) => {\n  const goTo = () => history.goBack();\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"py-3\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: goTo,\n        className: \"text-decoration-none bg-none\",\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"p-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"After you log in, you will choose five equations, by pressing the \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Get New Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 75\n        }, this), \" button, so, type the answers on the second side of the equation.\", /*#__PURE__*/_jsxDEV(\"lr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 1\n        }, this), \"The game is very simple, you just have to learn something about math. You have three tries for each group of questions, the result will be registered on your database So enjoy this beautiful adventure\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Creator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Create a basic calculator React app. The app needs to have a header for a logo and a menu. On the first screen of this app, the app selects a random calculation from a database of 5 different. For example a calculation could be: 3 * 6 . You can make the 5 calculations as complicated as you want. You can use a database of choice. Also store a hash of each calculation in the database. In the interface, list the 5 calculations and highlight the selected calculation per session. Besides the calculation there should be an input field in the database, which the user can use to give the answer to the calculation. In the example above, the answer should be 18. Next to the input field there should be a submit button to send in an answer. If the user submits the submit button and the answer is correct, send the user to a thank you page in the app (use a funny GIF on the thank you page). From the thank you page he can go to the default page again to get a new random calculation and go again. If the answer is wrong, the user should get a nice notification that his answer is not correct and that he should try again. The maximum amount of tries is 3. If the user tries more than 3 times, the user failed and is not allowed to try again. Make sure you store in the database how many tries a user does before he gets the answer correct. Also make sure to store, which questions the user got right or wrong. The webpage can be used by multiple people.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = About;\nexport default About;\n\nvar _c;\n\n$RefreshReg$(_c, \"About\");","map":{"version":3,"sources":["C:/Users/ismaiel/Desktop/Klippa/frontend/src/components/About.js"],"names":["React","Button","Container","About","history","goTo","goBack"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,iBAAlC;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAC3B,QAAMC,IAAI,GAAC,MAAID,OAAO,CAACE,MAAR,EAAf;;AACA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAED,IAAjB;AAAuB,QAAA,SAAS,EAAC,8BAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEE;AAAA,sGACkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADlE,oFAER;AAAA;AAAA;AAAA;AAAA,gBAFQ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARA,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2CD,CA7CD;;KAAMF,K;AA+CN,eAAeA,KAAf","sourcesContent":["import React from 'react'\r\nimport { Button, Container } from 'react-bootstrap'\r\n\r\nconst About = ({history}) => {\r\n  const goTo=()=>history.goBack()\r\n  return (\r\n    <Container>\r\n      <div className='py-3'>\r\n        <Button onClick={goTo} className='text-decoration-none bg-none'>\r\n          Go Back\r\n        </Button>\r\n      </div>\r\n      <Container className='p-3'>\r\n      <h1>The Game</h1>\r\n        <p>\r\n        After you log in, you will choose five equations, by pressing the <strong>Get New Questions</strong> button, so, type the answers on the second side of the equation.\r\n<lr></lr>The game is very simple, you just have to learn something about math.\r\nYou have three tries for each group of questions, the result will be registered on your database\r\nSo enjoy this beautiful adventure\r\n        </p>\r\n      <h1>The Creator</h1>\r\n        <p>\r\n          Create a basic calculator React app. The app needs to have a header\r\n          for a logo and a menu. On the first screen of this app, the app\r\n          selects a random calculation from a database of 5 different. For\r\n          example a calculation could be: 3 * 6 . You can make the 5\r\n          calculations as complicated as you want. You can use a database of\r\n          choice. Also store a hash of each calculation in the database. In the\r\n          interface, list the 5 calculations and highlight the selected\r\n          calculation per session. Besides the calculation there should be an\r\n          input field in the database, which the user can use to give the answer\r\n          to the calculation. In the example above, the answer should be 18.\r\n          Next to the input field there should be a submit button to send in an\r\n          answer. If the user submits the submit button and the answer is\r\n          correct, send the user to a thank you page in the app (use a funny GIF\r\n          on the thank you page). From the thank you page he can go to the\r\n          default page again to get a new random calculation and go again. If\r\n          the answer is wrong, the user should get a nice notification that his\r\n          answer is not correct and that he should try again. The maximum amount\r\n          of tries is 3. If the user tries more than 3 times, the user failed\r\n          and is not allowed to try again. Make sure you store in the database\r\n          how many tries a user does before he gets the answer correct. Also\r\n          make sure to store, which questions the user got right or wrong. The\r\n          webpage can be used by multiple people.\r\n        </p>\r\n      </Container>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default About\r\n"]},"metadata":{},"sourceType":"module"}