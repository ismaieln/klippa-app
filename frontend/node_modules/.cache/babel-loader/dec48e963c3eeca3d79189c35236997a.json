{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetch = _id => {\n  _s();\n\n  const [expressions, setExpressions] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await axios.get('/api/expression');\n      setExpressions(data);\n      let index = [];\n\n      for (let i = 0; i = 4; i++) {\n        index.push(Math.floor(Math.random() * data.length));\n      }\n\n      console.log(index);\n    };\n\n    fetchData();\n  }, []);\n  return [expressions];\n};\n\n_s(useFetch, \"j3RokYMz/A9ueeP62T8AggQJHBY=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/ismai/OneDrive/Desktop/Klippa/frontend/src/hooks/useFetch.js"],"names":["useState","useEffect","axios","useFetch","_id","expressions","setExpressions","fetchData","data","get","index","i","push","Math","floor","random","length","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACxB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,SAAS,GAAG,YAAY;AAC5B,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMN,KAAK,CAACO,GAAN,CAAU,iBAAV,CAAvB;AACAH,MAAAA,cAAc,CAACE,IAAD,CAAd;AAEA,UAAIE,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAG,CAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BD,QAAAA,KAAK,CAACE,IAAN,CAAWC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,IAAI,CAACQ,MAAhC,CAAX;AACD;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACD,KATD;;AAUAH,IAAAA,SAAS;AACV,GAZQ,EAYN,EAZM,CAAT;AAcA,SAAO,CAACF,WAAD,CAAP;AACD,CAlBD;;GAAMF,Q;;AAoBN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst useFetch = (_id) => {\r\n  const [expressions, setExpressions] = useState([])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data } = await axios.get('/api/expression')\r\n      setExpressions(data)\r\n\r\n      let index = []\r\n      for (let i = 0; (i = 4); i++) {\r\n        index.push(Math.floor(Math.random() * data.length))\r\n      }\r\n      console.log(index)\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  return [expressions]\r\n}\r\n\r\nexport default useFetch\r\n"]},"metadata":{},"sourceType":"module"}